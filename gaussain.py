def augmentMatrix(A, b):
    return [AA + bb for AA, bb in zip(A, b)]


def swapRows(M, r1, r2):
    M[r1], M[r2] = M[r2], M[r1]


def scaleRow(M, r, scale):
    if scale == 0:
        raise ValueError('scale不能是0')
    M[r] = [a * scale for a in M[r]]


def addScaledRow(M, r1, r2, scale):
    M[r1] = [a + b * scale for a, b in zip(M[r1], M[r2])]


def matxRound(M, decPts=4):
    for j, row in enumerate(M):
        for i, c in enumerate(row):
            M[j][i] = round(c, decPts)


def gj_Solve(A, b, decPts=4, epsilon=1.0e-16):
    # 检查A，b是否行数相同
    if len(A) != len(b):
        return None

    # 构造增广矩阵Ab
    Ab = augmentMatrix(A, b)

    for j in range(len(Ab)):
        dic = {}
        for i in range(j, len(Ab)):
            dic[i] = abs(Ab[i][j])

        # 寻找列c中 对角线以及对角线以下所有元素（行 c~N）的绝对值的最大值
        max_value_key = max(dic.items(), key=lambda x: x[1])[0]
        max_value = max(dic.items(), key=lambda x: x[1])[1]

        # 如果绝对值最大值为0, 那么A为奇异矩阵，返回None
        if max_value < epsilon:
            return None

        if (len(dic)) != 1 and j != max_value_key:
            swapRows(Ab, j, max_value_key)

        # 当前列的对角线元素缩放为1
        Ab[j] = [x / Ab[j][j] for x in Ab[j]]

        # 当前列的其他元素消为0
        for i in range(j):
            addScaledRow(Ab, i, j, -1 * (Ab[i][j] / Ab[j][j]))

        for i in range(j + 1, len(Ab)):
            addScaledRow(Ab, i, j, -1 * (Ab[i][j] / Ab[j][j]))

    # 每个元素四舍五入到特定小数数位
    matxRound(Ab, decPts)

    return [[x[-1]] for x in Ab]


def matxMultiply(A, B):
    # 如果A的列数与B的行数不相等，则raise ValueError
    if len(B) != len(list(zip(*A))):
        raise ValueError("Matrix A\'s column number doesn\'t equal to Matrix b\'s row number")
    return [[sum(a * b for a, b in zip(a, b)) for b in zip(*B)] for a in A]


def transpose(M):
    return [list(x) for x in zip(*M)]


def linearRegression2D(X, Y):
    x_num = [[1]] * len(X)
    newX = augmentMatrix(map(list, zip(X)), x_num)
    newY = map(list, zip(Y))
    A = matxMultiply(transpose(newX), newX)
    b = matxMultiply(transpose(newX), newY)

    result = gj_Solve(A, b, decPts=4, epsilon=1.0e-16)

    return result[0][0], result[1][0]


def linearRegression(X, Y):
    newX = X
    newY = [[y] for y in Y]
    A = matxMultiply(transpose(newX), newX)
    b = matxMultiply(transpose(newX), newY)

    result = gj_Solve(A, b, decPts=4, epsilon=1.0e-16)

    return result[0][0], result[1][0], result[2][0]


X3_d = [[-5.1857117227363085, -5.1900970195226614],
        [-5.465273887720184, -5.509257426881757],
        [-3.778650853256588, -4.988878982958403],
        [-4.606914770393267, -5.377485257254576],
        [-2.043953128557142, -3.706867433038774],
        [-4.861610254733492, -5.147351755746344],
        [-3.1253675863057575, -3.60584429797598],
        [-3.824561020934727, -4.259447197076285],
        [-3.8091168166284017, -6.157781259715128],
        [-4.200027487143612, -5.648543271174903],
        [-5.19675466149279, -3.8750478157763832],
        [-4.846865154952044, -1.5973292192193727],
        [-5.19421322669286, -6.177451765121107],
        [-5.30768206634365, -6.132761452869863],
        [-6.100369352266446, -3.0471142818365795],
        [-3.2963131431858024, -3.850930759598159],
        [-3.44284724275175, -3.455060867561395],
        [-3.8811372057846985, -4.184479252356393],
        [-3.097896504807369, -3.128177898723874],
        [-2.2770184139903584, -2.113614295701665],
        [-3.2970922630418853, -4.6364126775632375],
        [-3.6294443741074565, -3.875631890416828],
        [-3.227834118295835, -4.866763824344517],
        [-2.989421736342025, -3.3426435260456926],
        [-2.8050779470797393, -3.8259927438092065],
        [-2.462180899711438, -2.288174362431975],
        [-2.882518632530127, -1.8958461463298613],
        [-2.399716431095391, -4.84465986286694],
        [-2.8833378358801096, -2.950010913893688],
        [-2.4677940074333664, -2.9009443497590146],
        [-4.379468955052375, -2.916540343735017],
        [-2.691617437916533, -4.0018478705938785],
        [-2.758515668006303, -2.9125512621859615],
        [-2.734723809284816, -1.8798037866654815],
        [-0.10088613983612005, -3.628182342783876],
        [-2.69855075265772, -3.2616331791217306],
        [-1.4699268649261608, -2.649714563106014],
        [-3.1614850310146556, -2.9978216519933047],
        [-2.5805240664686515, -2.100984332665531],
        [-2.296733563616156, -1.0026718797439678],
        [-0.7388267924602876, -1.7898140479547469],
        [-1.7012983885845676, -2.4967051118251575],
        [-2.0642057744713527, -1.9304597060747528],
        [-1.904031810802984, -2.4318248202771757],
        [0.31211328882742784, -1.001679284679512],
        [-0.24395127754747947, -1.9609150454840216],
        [-0.5468101532648797, -0.6227128291732863],
        [0.22593182379272747, -1.5425893063643414],
        [-1.2784207012160673, -0.40634935158943963],
        [-2.428426612393113, 0.08049308700196622],
        [-1.8761792614641268, 1.2276273538862719],
        [-2.8175814345177557, -1.534322822242043],
        [-1.4452564350245118, 0.28441202939718013],
        [-0.17779760999748173, -0.5154152385698062],
        [-0.5242544897067096, -1.1348463504971942],
        [-0.9856953935138845, -0.5370137995679187],
        [1.2433402766764061, -0.8778152372535082],
        [-0.4889419216329958, -2.3159463567717644],
        [-1.5829289861616591, -0.4383337223358399],
        [1.07272079533086, -0.901518143259523],
        [0.006812347590637646, -2.5536148337591715],
        [-0.013061672929800316, 0.22050846739614838],
        [0.6002422787372863, 0.16933281131489797],
        [-1.2948101780362133, -0.4734135673206845],
        [-0.3439541350602382, 0.09798400628489007],
        [-1.531916080652705, -0.4183040831232092],
        [-0.17597197342630333, 0.8733135909267679],
        [0.457498670223163, -1.3401942428114533],
        [-2.4696283827520307, 0.4943410710523144],
        [0.972842181353577, -1.6107053543576468],
        [-0.7745791900609886, -1.9910117803009744],
        [0.7368561278299182, -1.2596070976413178],
        [0.44171594400027137, 0.8565174256787786],
        [0.015517173182598876, 0.20931433707963312],
        [-0.8359424217502192, 0.7446630849791389],
        [-0.5117930505682025, 0.7696334720402123],
        [-0.8711481061812614, -0.4684142360461485],
        [-0.6815100332239787, 0.9229036824897482],
        [1.5275818082386516, 0.17565128038624467],
        [0.48450179675111504, 0.8016180930099984],
        [0.33331531581350515, 1.4582031047756105],
        [-0.8706986116692033, 1.995477269233339],
        [1.271515973419721, 2.655828534760693],
        [-0.011282898022213939, -0.6281927862805254],
        [0.7619253112099329, 0.9211577657730355],
        [1.9793230096894048, 0.31405990785170146],
        [2.4417505881185333, 0.8897256248381296],
        [1.061125186484323, 1.3469643889892164],
        [1.5110974139301063, 2.529602958845532],
        [2.7465001654381607, 1.4170466326073838],
        [-0.11363004908925434, 1.4613093275391829],
        [1.3458583183579915, 2.1832665204312045],
        [1.378558326484525, 2.6235436619468353],
        [1.6009314531066698, 1.4749498529793565],
        [0.9586246097739906, 2.901957928497705],
        [1.195467746506377, 1.6499565598875936],
        [3.173136418525838, 2.0313290252323517],
        [3.4336988525382104, 3.006651825608772],
        [2.729552906468897, 2.7970212711082576],
        [2.8597135856108635, 3.7946379948098508],
        [2.3429454270247896, 0.8937692442619043],
        [2.9513853662932967, 2.606245230375338],
        [2.327114274355798, 2.4176073955726536],
        [-0.23426891702571373, 2.5576975312685053],
        [2.601977538844605, 0.7974457759484028],
        [2.7964577287592163, 3.7629762559839977],
        [3.6010164630674195, 2.5929591011121618],
        [3.817460947828226, 4.262701634567875],
        [2.4017062918202035, 2.587484338341305],
        [3.469726366114257, 4.617003927411513],
        [3.607780695472669, 4.345809241666475],
        [3.661044991862194, 2.7022427746660433],
        [3.7768666312217385, 2.7628593095785674],
        [4.052087664786846, 3.824597089048446],
        [2.5189198234857657, 3.6528600604689596],
        [2.5214844254460367, 3.5568838212847607],
        [2.7161159215150015, 4.496256553796835],
        [4.601244500218985, 3.5259118268689154],
        [2.60506947034751, 3.4941170377378117],
        [4.220874831110903, 3.1214652147337763],
        [3.8658749767362544, 5.779660084930337],
        [3.9972777018371244, 3.0021246952554423],
        [4.3518152578538025, 6.344474751488118],
        [3.7222944065558816, 3.8897468243998494],
        [3.2991023180716317, 4.843104865744583],
        [5.495993675306617, 3.643147958557632],
        [3.973716712425763, 5.02818493026317],
        [4.8677800261218875, 3.731586434222821],
        [4.458610517787826, 4.079333411275233],
        [3.9291355423151293, 4.757694782992626],
        [3.900780118636699, 5.021815648900264],
        [5.373182653681706, 3.1751374690627445],
        [5.852417233710314, 6.8033678431398545],
        [3.6389989377350096, 5.549116905534962],
        [6.0443888541478135, 4.088205383848528],
        [4.950199831514781, 6.08094620460231]]
Y3_d = [7.815881334374123,
        8.135599470091826,
        9.035367945390412,
        10.23630222260802,
        11.743712021335773,
        10.031965640854718,
        11.08866718102109,
        10.944655592820805,
        10.718628539784444,
        10.351400399765922,
        7.254052856605259,
        7.317710058938463,
        11.929224236182385,
        8.576154575602008,
        4.605753155938095,
        10.46669856093159,
        9.21445502131034,
        9.17629079846949,
        11.094847021809736,
        12.265168181623636,
        12.333113541636259,
        11.096762335206032,
        11.161614639177678,
        9.699623837277795,
        10.421571627260994,
        11.798931537989139,
        9.002113658026376,
        11.488445942884479,
        10.431405680779408,
        11.414182089094503,
        6.770741153185987,
        13.408713812061055,
        10.766416729877772,
        10.6658734370643,
        14.222765499307496,
        11.334388214062463,
        12.17285473823917,
        11.30223691162932,
        9.714076615361202,
        9.914344974949817,
        12.398082133324944,
        12.014029100115266,
        10.151001005649933,
        10.982493746019273,
        12.930231688071803,
        13.024527515644287,
        13.275919222504964,
        14.031649894187527,
        10.317731252854374,
        8.636646221187185,
        8.138706392148679,
        10.960973058600793,
        10.560415183668528,
        12.458766671660854,
        13.734224344063145,
        11.557972921872636,
        14.89258507750379,
        15.16735140691014,
        12.696492038719775,
        16.025045063176783,
        15.853743150468352,
        13.360285227415371,
        14.765783664450788,
        11.599033716401516,
        9.627108785183244,
        10.886892259833736,
        12.566988386170777,
        14.818752656252553,
        7.512029728192935,
        15.569695690257836,
        13.610021157271648,
        14.504223257956786,
        14.394406727922314,
        13.842053168485165,
        10.5358733899035,
        11.813795908547673,
        13.048414523595923,
        11.696460183846165,
        15.467556946414811,
        10.867852671058813,
        12.097913190165974,
        8.001429655345275,
        13.016910696277368,
        14.777447305112,
        11.360211796652155,
        15.42978640869727,
        15.03436934883925,
        14.066833949594827,
        13.134530445924801,
        15.255909045512537,
        10.098565049363508,
        12.852801037927758,
        12.961887749588495,
        14.624707807625786,
        11.638517506670967,
        12.914584517064721,
        16.10586660850577,
        14.60340950309287,
        14.02125617619085,
        15.140313293395446,
        17.824666391790842,
        16.128041075511067,
        14.459934218601337,
        9.527817348392382,
        13.19298816326421,
        14.703933837524614,
        16.837287610006907,
        16.267135972077153,
        13.915437530705725,
        16.470234508843102,
        15.593663469539237,
        17.35415199808474,
        18.55355506624945,
        14.61494384185373,
        13.645943701047969,
        14.062935670138666,
        13.084364838224657,
        16.068828165790684,
        14.058245386687751,
        17.763651469117583,
        14.758949961315004,
        16.549321066130833,
        13.586455392640286,
        13.945614513888867,
        13.465221314170565,
        18.170591130012856,
        14.726153433354838,
        16.480514029846695,
        18.974152896129862,
        14.55140645379645,
        14.192600216626285,
        18.968567216895575,
        17.878866759151723,
        14.5748931138967,
        19.301848212650636,
        16.644498672016105]

y3_d = [[y] for y in Y3_d]
print(gj_Solve(X3_d, y3_d))
